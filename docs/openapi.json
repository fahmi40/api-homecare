{
  "openapi": "3.0.3",
  "info": {
    "title": "home-care",
    "description": "The home-care allows you to perform all the operations that you do with our applications. home-care is built using REST principles which ensures predictable URLs, uses standard HTTP response codes, authentication, and verbs that makes writing applications easy.\n\n## Query Params\n\nhome-care support a common way for pagination, sorting, filtering, searching and other using URL query params on `GET` method.\n\n### Pagination\n\nYou can use the following query parameters for pagination :\n\n* `$page`: used to specify the page number to retrieve, default = 1.\n* `$per_page`: used to specify the number of items to retrieve per page, default = 10.\n* `$is_disable_pagination`: used to disable pagination and retrieve all items in one request, default = false.\nExample :\n```\nGET /contacts?$page=3\u0026$per_page=10\n```\n\n### Sorting\n\nYou can use the `$sort` query parameter for sorting.\n\n* Use the field name according to what you want to sort.\n* Use dot notation to sort by the field of the object.\n* You can specify multiple fields separated by commas.\n* Add `-` (minus sign) before the field name to sort in descending order.\n* Add `:i` after the field name to sort case-insensitively.\n\nThis is example if you want to retrieve product data sort by category name, then quantity on hand descending, then case-insensitive name descending :\n```\nGET /products?$sort=category.name,-quantity.on_hand,-name:i\n```\n\n### Filtering\n\nYou can use the field name for filtering the result set based on one or more conditions.\n\n* Use the field name according to what you want to filter.\n* Use dot notation to filter by the field of the object.\n* Use dot notation with `*` to filter by the field on array of the object. (TODO)\n* Use dot notation with `0` to filter by the field on array of the object and also hide non-matching arrays in the results. (TODO)\n* You can use the following operators for filtering :\n\nOperator  | Description               | Example\n----------|---------------------------|-----------------------------\nnone      | Equal to (Exact matches)  | `/contacts?gender=male`\n`$eq`     | Same as above             | `/contacts?gender.$eq=male`\n`$ne`     | Not equal to              | `/contacts?phone.$ne=null`\n`$gt`     | Greater than              | `/contacts?age.$gt=18`\n`$gte`    | Greater than or equal     | `/contacts?age.$gte=21`\n`$lt`     | Less than                 | `/contacts?age.$lt=17`\n`$lte`    | Less than or equal        | `/contacts?age.$lte=15`\n`$like`   | Like                      | `/contacts?name.$like=john%`\n`$nlike`  | Not like                  | `/contacts?name.$nlike=john%`\n`$ilike`  | Case-insensitive Like     | `/contacts?name.$ilike=john%`\n`$nilike` | Case-insensitive Not Like | `/contacts?name.$nilike=john%`\n`$in`     | In                        | `/contacts?age.$in=17,21,34`\n`$nin`    | Not in                    | `/contacts?age.$nin=17,21,34`\n\n### Conditional filtering\n\nYou can use the `$or` query parameter with `|` delimiter for conditional filtering.\n\nThis is example if you want to filter contact data with condition `(gender = 'female' or age \u003c 10) and (is_salesman = '1' or is_employee = '1')` :\n```\nGET /contacts?$or=gender:female|age.$lt:10\u0026$or=is_salesman:true|is_employee:true\n```\n\n### Searching\n\nYou can use the `$search` query parameter for searching.\n\nThis is example if you want to search contact data with code or name contain character \"john\" (case-insensitive) :\n```\nGET /contacts?$search=code,name:john\n```\n\n### Comparing\n\nYou can use the `$field` key for comparing one field to another field in the same record.\n\nThis is example if you want to filter product data with qty_on_order greater than qty_available :\n```\nGET /products?qty_on_order.$gt=$field:qty_available\n```\n\n### Selection\n\nYou can use the `$select` query parameter to retrieve specific fields in the response.\n\n* Use the field name according to what you want to retrieve.\n* Use dot notation to retrieve the field of the object.\n* You can specify multiple fields separated by commas, for example : `GET /contacts?$select=id,code,name,classification.name`.\n* By default, array fields are hidden on get list api for performance reason, you can use `$nclude` query parameter to retrieve the specific array field, for example : `/contacts?$include=families,friends,phones`. Example to retrieve all array field : `/contacts?$include=all`\n* You can use the following operator for aggregation :\n\nOperator | Description | Example                    \n---------|-------------|----------------------------\n`$count` | count       | `/products?$select=$count:id`\n`$sum`   | sum         | `/products?$select=$sum:sold`\n`$min`   | minimum     | `/products?$select=$min:sold`\n`$max`   | maximum     | `/products?$select=$max:sold`\n`$avg`   | average     | `/products?$select=$avg:sold`\n\n### Grouping\n\nYou can use the `$group` query parameter to grouping.\n\nExample :\n```\n/products?$group=category.id\u0026$select=category.id,$sum:sold\u0026$sort:-$sum:sold\n```\n",
    "contact": {
      "name": ""
    },
    "license": {
      "name": ""
    },
    "version": "2024.05.281018"
  },
  "servers": [
    {
      "description": "Local",
      "url": "http://localhost:4001"
    }
  ],
  "paths": {
    "/api/medical_officers": {
      "post": {
        "description": "Use this method to create MedicalOfficer",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalOfficer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalOfficer"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create MedicalOfficer",
        "tags": [
          "MedicalOfficer"
        ]
      },
      "get": {
        "description": "Use this method to get list of MedicalOfficer",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalOfficerList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get MedicalOfficer",
        "tags": [
          "MedicalOfficer"
        ]
      }
    },
    "/api/medical_officers/{id}": {
      "get": {
        "description": "Use this method to get MedicalOfficer by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalOfficer"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get MedicalOfficer By ID",
        "tags": [
          "MedicalOfficer"
        ]
      },
      "put": {
        "description": "Use this method to update MedicalOfficer by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalOfficer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalOfficer"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update MedicalOfficer By ID",
        "tags": [
          "MedicalOfficer"
        ]
      },
      "patch": {
        "description": "Use this method to partially update MedicalOfficer by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalOfficer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalOfficer"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update MedicalOfficer By ID",
        "tags": [
          "MedicalOfficer"
        ]
      },
      "delete": {
        "description": "Use this method to delete MedicalOfficer by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalOfficer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalOfficer"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete MedicalOfficer By ID",
        "tags": [
          "MedicalOfficer"
        ]
      }
    },
    "/api/medical_treatments": {
      "post": {
        "description": "Use this method to create MedicalTreatment",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalTreatment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalTreatment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create MedicalTreatment",
        "tags": [
          "MedicalTreatment"
        ]
      },
      "get": {
        "description": "Use this method to get list of MedicalTreatment",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalTreatmentList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get MedicalTreatment",
        "tags": [
          "MedicalTreatment"
        ]
      }
    },
    "/api/medical_treatments/{id}": {
      "get": {
        "description": "Use this method to get MedicalTreatment by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalTreatment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get MedicalTreatment By ID",
        "tags": [
          "MedicalTreatment"
        ]
      },
      "put": {
        "description": "Use this method to update MedicalTreatment by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalTreatment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalTreatment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update MedicalTreatment By ID",
        "tags": [
          "MedicalTreatment"
        ]
      },
      "patch": {
        "description": "Use this method to partially update MedicalTreatment by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalTreatment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalTreatment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update MedicalTreatment By ID",
        "tags": [
          "MedicalTreatment"
        ]
      },
      "delete": {
        "description": "Use this method to delete MedicalTreatment by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalTreatment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalTreatment"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete MedicalTreatment By ID",
        "tags": [
          "MedicalTreatment"
        ]
      }
    },
    "/api/registrations": {
      "post": {
        "description": "Use this method to create Registration",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create Registration",
        "tags": [
          "Registration"
        ]
      },
      "get": {
        "description": "Use this method to get list of Registration",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get Registration",
        "tags": [
          "Registration"
        ]
      }
    },
    "/api/registrations/{id}": {
      "get": {
        "description": "Use this method to get Registration by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get Registration By ID",
        "tags": [
          "Registration"
        ]
      },
      "put": {
        "description": "Use this method to update Registration by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update Registration By ID",
        "tags": [
          "Registration"
        ]
      },
      "patch": {
        "description": "Use this method to partially update Registration by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update Registration By ID",
        "tags": [
          "Registration"
        ]
      },
      "delete": {
        "description": "Use this method to delete Registration by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete Registration By ID",
        "tags": [
          "Registration"
        ]
      }
    },
    "/api/schedules": {
      "post": {
        "description": "Use this method to create Schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create Schedule",
        "tags": [
          "Schedule"
        ]
      },
      "get": {
        "description": "Use this method to get list of Schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get Schedule",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/api/schedules/{id}": {
      "get": {
        "description": "Use this method to get Schedule by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get Schedule By ID",
        "tags": [
          "Schedule"
        ]
      },
      "put": {
        "description": "Use this method to update Schedule by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update Schedule By ID",
        "tags": [
          "Schedule"
        ]
      },
      "patch": {
        "description": "Use this method to partially update Schedule by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update Schedule By ID",
        "tags": [
          "Schedule"
        ]
      },
      "delete": {
        "description": "Use this method to delete Schedule by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete Schedule By ID",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/api/transaction_details": {
      "post": {
        "description": "Use this method to create TransactionDetail",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create TransactionDetail",
        "tags": [
          "TransactionDetail"
        ]
      },
      "get": {
        "description": "Use this method to get list of TransactionDetail",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetailList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get TransactionDetail",
        "tags": [
          "TransactionDetail"
        ]
      }
    },
    "/api/transaction_details/{id}": {
      "get": {
        "description": "Use this method to get TransactionDetail by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get TransactionDetail By ID",
        "tags": [
          "TransactionDetail"
        ]
      },
      "put": {
        "description": "Use this method to update TransactionDetail by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update TransactionDetail By ID",
        "tags": [
          "TransactionDetail"
        ]
      },
      "patch": {
        "description": "Use this method to partially update TransactionDetail by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update TransactionDetail By ID",
        "tags": [
          "TransactionDetail"
        ]
      },
      "delete": {
        "description": "Use this method to delete TransactionDetail by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionDetail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete TransactionDetail By ID",
        "tags": [
          "TransactionDetail"
        ]
      }
    },
    "/api/transactions": {
      "post": {
        "description": "Use this method to create Transaction",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create Transaction",
        "tags": [
          "Transaction"
        ]
      },
      "get": {
        "description": "Use this method to get list of Transaction",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get Transaction",
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/transactions/{id}": {
      "get": {
        "description": "Use this method to get Transaction by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get Transaction By ID",
        "tags": [
          "Transaction"
        ]
      },
      "put": {
        "description": "Use this method to update Transaction by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update Transaction By ID",
        "tags": [
          "Transaction"
        ]
      },
      "patch": {
        "description": "Use this method to partially update Transaction by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update Transaction By ID",
        "tags": [
          "Transaction"
        ]
      },
      "delete": {
        "description": "Use this method to delete Transaction by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete Transaction By ID",
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/users": {
      "post": {
        "description": "Use this method to create User",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Create User",
        "tags": [
          "User"
        ]
      },
      "get": {
        "description": "Use this method to get list of User",
        "parameters": [
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          },
          {
            "$ref": "#/components/parameters/queryParam.Any"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get User",
        "tags": [
          "User"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "description": "Use this method to get User by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Get User By ID",
        "tags": [
          "User"
        ]
      },
      "put": {
        "description": "Use this method to update User by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Update User By ID",
        "tags": [
          "User"
        ]
      },
      "patch": {
        "description": "Use this method to partially update User by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Partially Update User By ID",
        "tags": [
          "User"
        ]
      },
      "delete": {
        "description": "Use this method to delete User by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParam.ID"
          },
          {
            "$ref": "#/components/parameters/headerParam.Accept-Language"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.BadRequest"
                }
              }
            },
            "description": "A validation exception has occurred."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Unauthorized"
                }
              }
            },
            "description": "Invalid authorization credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.Forbidden"
                }
              }
            },
            "description": "User doesn't have permission to access the resource."
          }
        },
        "summary": "Delete User By ID",
        "tags": [
          "User"
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "headerParam.Accept-Language": {
        "in": "header",
        "name": "Accept-Language",
        "schema": {
          "default": "en-US",
          "enum": [
            "en-US",
            "en",
            "id-ID",
            "id"
          ],
          "type": "string"
        }
      },
      "pathParam.ID": {
        "description": "An ID of the resources",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "queryParam.Any": {
        "explode": true,
        "in": "query",
        "name": "params",
        "schema": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      }
    },
    "schemas": {
      "Error.BadRequest": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "example": 400,
                "format": "int32",
                "type": "integer"
              },
              "message": {
                "example": "The request cannot be performed because of malformed or missing parameters.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Error.Forbidden": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "example": 403,
                "format": "int32",
                "type": "integer"
              },
              "message": {
                "example": "The user does not have permission to access the resource.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Error.Unauthorized": {
        "properties": {
          "error": {
            "properties": {
              "code": {
                "example": 401,
                "format": "int32",
                "type": "integer"
              },
              "message": {
                "example": "Invalid authentication token.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MedicalOfficer": {
        "properties": {
          "address": {
            "type": "string"
          },
          "birthdate": {
            "format": "date",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "modified_by": {
            "type": "integer"
          },
          "no_ktp": {
            "type": "string"
          },
          "no_sip": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "place_of_birth": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "province": {
            "type": "integer"
          },
          "regency_or_city": {
            "type": "integer"
          },
          "religion": {
            "type": "string"
          },
          "title_name": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicalOfficerList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "address": {
                  "type": "string"
                },
                "birthdate": {
                  "format": "date",
                  "type": "string"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "email": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "gender": {
                  "type": "string"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "latitude": {
                  "type": "string"
                },
                "longitude": {
                  "type": "string"
                },
                "modified_by": {
                  "type": "integer"
                },
                "no_ktp": {
                  "type": "string"
                },
                "no_sip": {
                  "type": "string"
                },
                "phone_number": {
                  "type": "string"
                },
                "place_of_birth": {
                  "type": "string"
                },
                "postal_code": {
                  "type": "string"
                },
                "province": {
                  "type": "integer"
                },
                "regency_or_city": {
                  "type": "integer"
                },
                "religion": {
                  "type": "string"
                },
                "title_name": {
                  "type": "string"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MedicalTreatment": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "modified_by": {
            "type": "integer"
          },
          "share_of_clinics_percent": {
            "type": "number"
          },
          "share_of_clinics_value": {
            "type": "number"
          },
          "share_of_officers_percent": {
            "type": "number"
          },
          "share_of_officers_value": {
            "type": "number"
          },
          "treat_name": {
            "type": "string"
          },
          "treat_price": {
            "type": "number"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicalTreatmentList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "modified_by": {
                  "type": "integer"
                },
                "share_of_clinics_percent": {
                  "type": "number"
                },
                "share_of_clinics_value": {
                  "type": "number"
                },
                "share_of_officers_percent": {
                  "type": "number"
                },
                "share_of_officers_value": {
                  "type": "number"
                },
                "treat_name": {
                  "type": "string"
                },
                "treat_price": {
                  "type": "number"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Registration": {
        "properties": {
          "complaints": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "modified_by": {
            "type": "integer"
          },
          "patient_id": {
            "type": "integer"
          },
          "phone_number": {
            "type": "string"
          },
          "reg_date": {
            "type": "integer"
          },
          "reg_number": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "visit_plan": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RegistrationList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "complaints": {
                  "type": "string"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "modified_by": {
                  "type": "integer"
                },
                "patient_id": {
                  "type": "integer"
                },
                "phone_number": {
                  "type": "string"
                },
                "reg_date": {
                  "type": "integer"
                },
                "reg_number": {
                  "type": "string"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "visit_plan": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Schedule": {
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "province": {
            "type": "integer"
          },
          "regency_or_city": {
            "type": "integer"
          },
          "registration_id": {
            "type": "integer"
          },
          "sched_date": {
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScheduleList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "address": {
                  "type": "string"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "modified_by": {
                  "type": "string"
                },
                "postal_code": {
                  "type": "string"
                },
                "province": {
                  "type": "integer"
                },
                "regency_or_city": {
                  "type": "integer"
                },
                "registration_id": {
                  "type": "integer"
                },
                "sched_date": {
                  "type": "integer"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "confirmation_date": {
            "type": "integer"
          },
          "confirmation_id": {
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "modified_by": {
            "type": "integer"
          },
          "notes": {
            "type": "string"
          },
          "sched_id": {
            "type": "integer"
          },
          "total_prices": {
            "type": "number"
          },
          "trans_date": {
            "type": "integer"
          },
          "trans_number": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionDetail": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "modified_by": {
            "type": "integer"
          },
          "qty": {
            "type": "integer"
          },
          "total": {
            "type": "number"
          },
          "trans_id": {
            "type": "integer"
          },
          "treat_id": {
            "type": "integer"
          },
          "treat_price": {
            "type": "number"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionDetailList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "modified_by": {
                  "type": "integer"
                },
                "qty": {
                  "type": "integer"
                },
                "total": {
                  "type": "number"
                },
                "trans_id": {
                  "type": "integer"
                },
                "treat_id": {
                  "type": "integer"
                },
                "treat_price": {
                  "type": "number"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransactionList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "confirmation_date": {
                  "type": "integer"
                },
                "confirmation_id": {
                  "type": "integer"
                },
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "modified_by": {
                  "type": "integer"
                },
                "notes": {
                  "type": "string"
                },
                "sched_id": {
                  "type": "integer"
                },
                "total_prices": {
                  "type": "number"
                },
                "trans_date": {
                  "type": "integer"
                },
                "trans_number": {
                  "type": "string"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "modified_by": {
            "type": "integer"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "links": {
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "previous": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "page_context": {
            "properties": {
              "page": {
                "type": "integer"
              },
              "per_page": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "results": {
            "items": {
              "properties": {
                "created_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "created_by": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "modified_by": {
                  "type": "integer"
                },
                "password": {
                  "type": "string"
                },
                "token": {
                  "type": "string"
                },
                "updated_at": {
                  "format": "date-time",
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerTokenAuth": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "security": [
    {
      "bearerTokenAuth": []
    }
  ],
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "MedicalOfficer"
    },
    {
      "name": "MedicalTreatment"
    },
    {
      "name": "Registration"
    },
    {
      "name": "Schedule"
    },
    {
      "name": "Transaction"
    },
    {
      "name": "TransactionDetail"
    }
  ],
  "externalDocs": {
    "url": ""
  }
}